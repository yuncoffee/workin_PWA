@charset "utf-8";

@use "../../../../styles/mixin/mixin";
@use "../../../../styles/variables/variables";

$optionsBackgroundColor: hsla(var(--sy-gray-02), 1);
$optionsBackgroundColor__hover: hsla(var(--sy-gray-05), 0.3);
$optionsBackgroundColor__none: hsla(var(--sy-gray-02), 0);
$optionsContentsColor: variables.$contentsColor;
$optionsBorderRadius: variables.$borderRadius;
$optionsBorderColor: variables.$borderColor;
$optionContentsAlignList: "left", "center", "right";

@mixin optionGroupStyle() {
    @each $selectType in variables.$selectTypeList {
        &[data-c-type="#{$selectType}"] {
            color: $optionsContentsColor;
            border-color: $optionsBorderColor;
            @if $selectType == "box" or $selectType == "box-line" {
                border-radius: 0;
            }
            @if $selectType == "block" or $selectType == "block-line" {
                border-radius: $optionsBorderRadius;
                background: $optionsBackgroundColor;
            }
            @if $selectType == "block-line" or $selectType == "box-line" {
                background: $optionsBackgroundColor__none;
            } @else {
                background: $optionsBackgroundColor;
            }
        }
    }
}

@mixin optionItemStyle() {
    @each $selectType in variables.$selectTypeList {
        &[data-c-type="#{$selectType}"] {
            color: $optionsContentsColor;

            &:hover {
                background: $optionsBackgroundColor__hover;
                cursor: pointer;
            }

            @if $selectType == "box" or $selectType == "box-line" {
                border-radius: 0;
            }

            @if $selectType == "block" or $selectType == "block-line" {
                border-radius: $optionsBorderRadius;
                background: $optionsBackgroundColor;
            }
            @if $selectType == "block-line" or $selectType == "box-line" {
                background: $optionsBackgroundColor__none;
                border-color: variables.$borderColor;
            }
        }
    }
}

@mixin optionsStyle() {
    position: absolute;
    display: flex;
    flex-direction: column;
    gap: 1px;
    min-width: 40px;
    height: auto;
    overflow: hidden;
    margin: -1px;
    padding: 1.5px;
    border: variables.$defaultBorder;
    border-color: variables.$borderColor;
    transition: variables.$transition;
    transition-property: height, opacity, transform, overflow;
    z-index: 200;
    opacity: 1;

    &__item {
        width: 100%;
        padding: 0 8px;
        border: variables.$defaultBorder variables.$borderColor_none;
        word-break: break-all;
        backdrop-filter: blur(30px);
        border-radius: 0px;
        @include mixin.h6;
    }
}

@mixin optionGroupLength() {
    &[data-c-fill="fit"] {
        width: 100%;
    }

    &[data-c-fill="cover"] {
        width: 120%;
    }
}

@mixin optionGroupDirection() {
    &[data-c-direction="left top"] {
        top: 0;
        left: 0;
        transform: translate3D(calc(-100% - 2px), 0, 0);
    }

    &[data-c-direction="left center"] {
        top: 50%;
        left: 0;
        transform: translate3D(calc(-100% - 2px), -50%, 0);
    }

    &[data-c-direction="left btm"] {
        top: 100%;
        left: 0;
        transform: translate3D(calc(-100% - 2px), calc(-100% + 6px), 0);
    }

    &[data-c-direction="right top"] {
        top: 0;
        right: 0;
        transform: translate3D(calc(+100% + 2px), 0, 0);
    }

    &[data-c-direction="right center"] {
        top: 50%;
        right: 0;
        transform: translate3D(calc(+100% + 2px), -50%, 0);
    }

    &[data-c-direction="right btm"] {
        top: 100%;
        right: 0;
        transform: translate3D(calc(+100% + 2px), calc(-100% + 6px), 0);
    }

    &[data-c-direction="top left"] {
        top: 0;
        left: 0;
        transform: translate3D(0%, calc(-100% - 2px), 0);
    }

    &[data-c-direction="top center"] {
        top: 0;
        left: 50%;
        transform: translate3D(-50%, calc(-100% - 2px), 0);
    }

    &[data-c-direction="top right"] {
        top: 0;
        right: 0;
        transform: translate3D(0, calc(-100% - 2px), 0);
    }

    &[data-c-direction="btm left"] {
        top: calc(100% + 4px);
        left: 0;
        transform: translate3D(0, 0, 0);
    }

    &[data-c-direction="btm center"] {
        z-index: 1502;
        top: calc(100% + 4px);
        left: 50%;
        transform: translate3D(-50%, 0, 0);
    }

    &[data-c-direction="btm right"] {
        top: calc(100% + 4px);
        right: 0;
        transform: translate3D(0, 0, 0);
    }
}

@mixin optionContentsAlign() {
    @each $optionContentsAlign in $optionContentsAlignList {
        &[data-c-contents-align="#{$optionContentsAlign}"] {
            text-align: #{$optionContentsAlign};
        }
    }
}

@mixin optionItemSize() {
    @each $size in variables.$sizeList {
        &[data-c-size="#{$size}"] {
            @if $size == "xl" {
                @include mixin.lg;
            }
            @if $size == "lg" {
                @include mixin.mid;
            }
            @if $size == "mid" {
                @include mixin.sm;
            }
            @if $size == "sm" {
                @include mixin.xs;
            }
        }
    }
}
.options {
    @include optionsStyle();
    @include optionGroupStyle();
    @include optionGroupLength();
    @include optionGroupDirection();

    &__item {
        @include optionItemStyle();
        @include optionContentsAlign();
        @include optionItemSize();
    }
}
